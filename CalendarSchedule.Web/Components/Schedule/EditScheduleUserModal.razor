@inject IScheduleUserService scheduleUserService
@inject IUserService userService
@inject IClientService clientService

<div class="modal fade" id="editSchedule-@ScheduleId" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<EditForm Model="@ScheduleDto" OnValidSubmit="@Edit">
				<InputNumber hidden @bind-Value="ScheduleDto!.Id" />
				<DataAnnotationsValidator />

				<div class="modal-header">
					<h1 class="modal-title fs-5" id="staticBackdropLabel">Editar Agenda</h1>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<div class="col-12">
						<div class="form-check">
							<InputCheckbox class="form-check-input" @onclick=(IsParticular) @bind-Value="ScheduleDto.Particular" id="inParticular" />
							<label for="inParticular" class="form-check-label">Particular?</label>
						</div>
					</div>

					<div class="row g-3">
						<div class="col-6">
							<label for="inDataInicio" class="form-label">Data/Hora Inicio</label>
							<InputDate class="form-control" Type="InputDateType.DateTimeLocal" id="inDataInicio" @bind-Value="ScheduleDto!.DateStart" />
							<ValidationMessage For="@(() => ScheduleDto.DateStart)" />
						</div>
						<div class="col-6">
							<label for="inDataFinal" class="form-label">Data/Hora Final</label>
							<InputDate class="form-control" Type="InputDateType.DateTimeLocal" id="inDataFinal" @bind-Value="ScheduleDto.DateFinal" />
							<ValidationMessage For="@(() => ScheduleDto.DateFinal)" />
						</div>
						<div class="col-12">
							<label for="inDescricao" class="form-label">Descrição</label>
							<InputText class="form-control" @bind-Value="ScheduleDto!.Description" id="inDescricao" placeholder="Descrição" />
							<ValidationMessage For="@(() => ScheduleDto.Description)" />

						</div>
						@if (!Particular)
						{
							<div class="col-12">
								<label for="inClient" class="form-label">Cliente</label>
								<InputSelect class="form-select" id="inClient" @bind-Value="ScheduleDto!.ClientId">
									@if (ClientView?.Data is not null)
									{
										<option value="0">Selecione uma Opção</option>
										@foreach (var client in ClientView.Data)
										{
											<option value="@client.Id"> @client.Name</option>
										}
									}
								</InputSelect>
								<ValidationMessage For="@(() => ScheduleDto.ClientId)" />
							</div>
							@*   <div class="col-6">
								<label for="inUser" class="form-label">Colaborador</label>
								<InputSelect class="form-select" id="inUser" @bind-Value="ScheduleDto!.UserId">
									@if (UserView?.UsersDto is not null)
									{
										<option value="0">Selecione uma Opção</option>
										@foreach (var user in UserView.UsersDto)
										{
											<option value="@user.Id"> @user.Name</option>
										}
									}
								</InputSelect>
								<ValidationMessage For="@(() => ScheduleDto.UserId)" />
							</div> *@
							@*  <div class="col-6">
								<label for="inManager" class="form-label">Gestor</label>
								<InputSelect class="form-select" id="inManager" @bind-Value="ScheduleDto!.ManagerId">
									@if (UserViewManager?.UsersDto is not null)
									{
										<option value="0">Selecione uma Opção</option>
										@foreach (var user in UserViewManager.UsersDto)
										{
											<option value="@user.Id"> @user.Name</option>
										}
									}
								</InputSelect>
								<ValidationMessage For="@(() => ScheduleDto.UserId)" />
							</div> *@
							<div class="col-6">
								<label class="form-label">Opções</label>
								<div class="form-check">
									<InputCheckbox class="form-check-input" @bind-Value="ScheduleDto.MeetingType" id="inTypeMeeting" />
									<label for="inTypeMeeting" class="form-check-label">Remoto?</label>
								</div>
								<div class="form-check">
									<InputCheckbox class="form-check-input" @bind-Value="ScheduleDto.StatusSchedule" id="inStatusSchedule" />
									<label for="inStatusSchedule" class="form-check-label">Reservada?</label>
								</div>
							</div>
						}
						else
						{
							@*  <div class="col-12">
								<label for="inUser" class="form-label">Colaborador</label>
								<InputSelect class="form-select" id="inUser" @bind-Value="ScheduleDto!.UserId">
									@if (UserView?.UsersDto is not null)
									{
										<option value="0">Selecione uma Opção</option>
										@foreach (var user in UserView.UsersDto)
										{
											<option value="@user.Id"> @user.Name</option>
										}
									}
								</InputSelect>
								<ValidationMessage For="@(() => ScheduleDto.UserId)" />
							</div> *@
						}
					</div>
				</div>
				<div class="modal-footer">
					<button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Salvar</button>
				</div>
			</EditForm>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public Action? DataUpdated { get; set; }

	private ScheduleDto? ScheduleDto { get; set; } = new();
	private PagedResultView<UserDto>? UserView { get; set; }
	private PagedResultView<UserDto>? UserViewManager { get; set; }
	private PagedResultView<ClientDto>? ClientView { get; set; }

	[Parameter]
	public bool Particular { get; set; } = false;

	[Parameter]
	public int ScheduleId { get; set; }

	protected override async Task OnInitializedAsync()
	{
		//ScheduleDto = await scheduleUserService.GetById(ScheduleId);
		var user = await userService.GetAll();
		var userManager = await userService.GetManagerAll();
		var client = await clientService.GetAll();

		UserView = user.Value ;
		UserViewManager = userManager.Value;
		ClientView = client.Value;
	}
	private void Edit()
	{
		if (ScheduleDto is not null)
		{
			//var user = await scheduleUserService.Update(ScheduleDto);
			UpdateData();
			ScheduleDto = new();
		}
	}
	private void IsParticular()
	{
		Particular = !Particular;
		StateHasChanged();
	}
	private void UpdateData()
	{
		DataUpdated?.Invoke();
	}
}
