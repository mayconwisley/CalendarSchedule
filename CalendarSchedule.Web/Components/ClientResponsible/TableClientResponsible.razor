@inject IClientResponsibleService clientResponsibleService
@inject NavigationManager navigationManager
<div class="border mt-2">
	<table class="table table-striped align-middle">
		<thead>
			<tr>
				<th>Id</th>
				<th>Nome</th>
				<th>Email</th>
				<th>Descrição</th>
				<th>Cargo</th>
				<th class="text-center">Ativo</th>
				<th class="text-center">Ações</th>
			</tr>
		</thead>
		<tbody>
			@if (ClientResponsibleView is not null)
			{
				var clientsReponsible = ClientResponsibleView.Data;

				if (clientsReponsible is not null)
				{
					@foreach (var clientReponsible in clientsReponsible)
					{
						<tr>
							<td>@clientReponsible.Id</td>
							<td>@clientReponsible.Name</td>
							<td>@clientReponsible.Email</td>
							<td>@clientReponsible.Description</td>
							<td>@clientReponsible.Position</td>
							<td class="text-center">
								@(clientReponsible.Active ? "Sim" : "Não")
							</td>
							<td class="text-center">
								<button @onclick="() => Editar(clientReponsible.Id)" class="btn btn-info">
									Editar
								</button>

								<button data-bs-toggle="modal" data-bs-target="#deleteClientResponsible-@clientReponsible.Id" class="btn btn-danger">
									Excluir
								</button>
								<DeleteClientResponsibleModal ClientResponsibleId="@clientReponsible.Id" DataUpdated="@(() => DataUpdated())" />
							</td>
						</tr>

					}
				}
			}

		</tbody>
	</table>
</div>

@code {
	[Parameter]
	public PagedResultView<ClientResponsibleDto>? ClientResponsibleView { get; set; }
	private async void DataUpdated()
	{
		var clientResponsible = await clientResponsibleService.GetAll();
		ClientResponsibleView = clientResponsible.Value;
		StateHasChanged();
	}
	private void Editar(int id)
	{
		navigationManager.NavigateTo($"client/responsible/edit/{id}");
	}
}