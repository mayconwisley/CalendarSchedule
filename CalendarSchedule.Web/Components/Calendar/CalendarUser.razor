@inject IScheduleUserService scheduleUserService

@if (ScheduleUserDtosList is not null)
{    @if (ScheduleUserDtosList.Count() != 0)
    {
        @for (int i = 0; i < ScheduleUserDtosList.Count(); i++)
        {
            var currentSchedule = ScheduleUserDtosList[i].Data
                         .Where(w => w.ScheduleDto!.DateStart.Date == CurrenteDate.Date)
                         .ToList();
            @if (currentSchedule.Any())
            {
                var scheduleId = currentSchedule
                                            .Select(s => s.ScheduleId)
                                            .FirstOrDefault();
                var hourStart = currentSchedule
                                    .Select(s => s.ScheduleDto!.DateStart)
                                    .FirstOrDefault();
                var hourFinal = currentSchedule
                                    .Select(s => s.ScheduleDto!.DateFinal)
                                    .FirstOrDefault();
                UserDtos.Clear();
                <a href="#" data-bs-toggle="modal" data-bs-target="#tableScheduleUser-@scheduleId-@CurrenteDate.ToString("ddMMyyyy")" class="calenderUser">

                    @foreach (var item in currentSchedule)
                    {
                        string? userDisplay = item.ScheduleDto!.Particular ? $"{item.UserDto!.Name} - Particular" : item.UserDto!.Name;
                        UserDtos.Add(userDisplay!);
                    }
                    @{
                        UserDtos.Add($"{hourStart:HH:mm} - {hourFinal:HH:mm}");
                    }
                    @string.Join(", ", UserDtos)
                </a>
                <TableScheduleUserModal ScheduleId="scheduleId" DateSelected="@CurrenteDate.Date" />
            }
        }
    }
}


@code {

    [Parameter]
    public DateTime CurrenteDate { get; set; }
    List<string> UserDtos { get; set; } = [];
    private List<PagedResultView<ScheduleUserDto>>? ScheduleUserDtosList { get; set; }
    protected async override Task OnParametersSetAsync()
    {
        ScheduleUserDtosList.Clear();
        var scheduleUserList = await GetScheduleIdLists(CurrenteDate.Date);

        if (scheduleUserList is not null)
        {
            foreach (var item in scheduleUserList)
            {
                var scheduleUser = await scheduleUserService.GetByScheduleId(item.ScheduleId);
                ScheduleUserDtosList.Add(scheduleUser.Value);
            }
        }
    }
    private async Task<IEnumerable<ScheduleUserDto>> GetScheduleIdLists(DateTime currentDate)
    {
        var schedule = await scheduleUserService.GetByScheduleUserDateStart(currentDate.Date);

        if (schedule is not null)
        {
            var scheduleId = schedule.Value.Data
                            .Where(w => w.ScheduleDto!.DateStart.Date == CurrenteDate.Date)
                            .GroupBy(g => g.ScheduleId)
                            .Select(s => new ScheduleUserDto
                                {
                                    ScheduleId = s.Key
                                })
                            .ToList();

            return await Task.FromResult(scheduleId);
        }

        return await Task.FromResult(new List<ScheduleUserDto>());
    }
}
