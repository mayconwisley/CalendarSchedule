@using System.Globalization
@inject IScheduleUserService scheculeUserService

@{
    CultureInfo cultureInfo = new("pt-BR");
    DateTime dateStartMonth = new DateTime(competence.Year, competence.Month, 1);
    DateTime dateEndMonth = new DateTime(competence.Year, competence.Month, DateTime.DaysInMonth(competence.Year, competence.Month));
}

<div class="teste">
    <div class="calendario">
        <div class="desc-mes">
            <div class="titulo">
                <p>Agenda JS Maringá</p>
            </div>
            <nav>
                <ul class="pagination">
                    <li class="page-room">
                        <button class="page-link pn-mes" @onclick="PreviousMonth">
                            <span aria-hidden="true">&laquo;</span>
                        </button>
                    </li>
                    <li class="page-room nome-mes">
                        <p class="page-link">@competence.ToString("MMMM/yyyy", cultureInfo)</p>
                    </li>
                    <li class="page-room">
                        <button class="page-link pn-mes" @onclick="NextMonth">
                            <span aria-hidden="true">&raquo;</span>
                        </button>
                    </li>
                </ul>
            </nav>
            <div>
                <NavLink class="nav-link" href="Login" Match="NavLinkMatch.Prefix">Menu</NavLink>
            </div>
        </div>
        <div class="dia-semana">
            <div>Domingo</div>
            <div>Segunda-feira</div>
            <div>Terça-feira</div>
            <div>Quarta-feira</div>
            <div>Quinta-feira</div>
            <div>Sexta-feira</div>
            <div>Sábado</div>
        </div>
        <div class="centro-mes">
            <div class="dia-mes">

                @for (int i = 0; i < dateEndMonth.Day; i++)
                {
                    DateTime currentDate = dateStartMonth.AddDays(i);
                    int numWeek = ((int)currentDate.DayOfWeek);
                    bool isToday = currentDate.Date == DateTime.Now.Date;


                    @if (@currentDate.Day == 1)
                    {
                        @for (int y = 0; y < numWeek; y++)
                        {
                            <div class="vazio"></div>
                        }
                    }
                    <div class="@GetDayClass(numWeek, isToday)">
                        <div class="DiaDireita">
                            <b>@currentDate.Day</b>
                        </div>

                        @if (!dailyScheduleData.ContainsKey(currentDate) || dailyScheduleData[currentDate] is null)
                        {
                            <span class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </span>
                        }
                        else
                        {
                            ScheduleUserDtos = dailyScheduleData[currentDate];
                            <CalendarUser ScheduleUserDtos="@ScheduleUserDtos" CurrenteDate="@currentDate" />
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>


@code {

    DateTime competence = DateTime.Now.Date;
    Dictionary<DateTime, IEnumerable<ScheduleUserDto>> dailyScheduleData = new Dictionary<DateTime, IEnumerable<ScheduleUserDto>>();
    public IEnumerable<ScheduleUserDto> ScheduleUserDtos { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadDataMonth(competence);
    }

    private async Task<IEnumerable<ScheduleUserDto>> LoadScheduleUserDtoDates(DateTime dateSchedule)
    {
        var scheduleUserDtos = await scheculeUserService.GetByScheduleUserDateStart(dateSchedule);

        return scheduleUserDtos
         .Where(w => w.ScheduleDto!.DateStart.Date == dateSchedule.Date)
         .OrderBy(o => o.ScheduleDto!.DateStart)
         .GroupBy(g => new
         {
             SchedulesId = g.ScheduleId,
             DateStart = g.ScheduleDto!.DateStart
         })
         .Select(s => new ScheduleUserDto
             {
                 ScheduleId = s.Key.SchedulesId,
                 ScheduleDto = new()
                 {
                     DateStart = s.Key.DateStart
                 }
             })
             .ToList();
    }

    private async Task LoadDataMonth(DateTime competence)
    {
        DateTime dateStartMonth = new DateTime(competence.Year, competence.Month, 1);
        DateTime dateEndMonth = new DateTime(competence.Year, competence.Month, DateTime.DaysInMonth(competence.Year, competence.Month));
        dailyScheduleData.Clear();

        for (int i = 0; i < dateEndMonth.Day; i++)
        {
            DateTime currentDate = dateStartMonth.AddDays(i);
            dailyScheduleData[currentDate] = await LoadScheduleUserDtoDates(currentDate);
        }
    }
    private async Task NextMonth()
    {
        DateTime competenceAdd = competence.AddMonths(1);
        competence = competenceAdd;
        await LoadDataMonth(competence);
    }
    private async Task PreviousMonth()
    {
        DateTime competenceRemove = competence.AddMonths(-1);
        competence = competenceRemove;
        await LoadDataMonth(competence);
    }
    private string GetDayClass(int dayOfWeek, bool isToday)
    {
        return dayOfWeek switch
        {
            0 => isToday ? "dia-atual dia" : "domingo dia",
            6 => isToday ? "dia-atual dia" : "sabado dia",
            _ => isToday ? "dia-atual dia" : "dia"
        };
    }
}