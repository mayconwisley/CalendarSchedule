@inject NavigationManager navigationManager

<div class="border mt-2">
	<table class="table table-striped align-middle">
		<thead>
			<tr>
				<th>Id</th>
				<th>Nome</th>
				<th>Descrição</th>
				<th class="text-center">Gestor</th>
				<th class="text-center">Ativo</th>
				<th>Usuário</th>
				<th>Ações</th>
			</tr>
		</thead>
		<tbody>
			@if (UserView is not null)
			{
				var users = UserView.Data;

				if (users is not null)
				{
					@foreach (var user in users)
					{
						<tr>
							<td>@user.Id</td>
							<td>@user.Name</td>
							<td>@user.Description</td>
							<td class="text-center">
								@(user.Manager == true ? "Sim" : "Não")
							</td>
							<td class="text-center">
								@(user.Active == true ? "Sim" : "Não")
							</td>
							<td>@user.Username</td>
							<td>

								<button @onclick="() => Editar(user.Id)" class="btn btn-info">
									Editar
								</button>

								<button data-bs-toggle="modal" data-bs-target="#newContactUser-@user.Id" class="btn btn-info">
									Add Contato
								</button>
								<InsertUserContactModal UserId="@user.Id" UserName="@user.Name" DataUpdated="DataUpdate" />
								
								<button @onclick="() => Detalhe(user.Id)" class="btn btn-info">
									Detalhe
								</button>

								<button data-bs-toggle="modal" data-bs-target="#deleteUser-@user.Id" class="btn btn-danger">
									Excluir
								</button>
								<DeleteUserModal UserId="@user.Id" DataUpdated="DataUpdate" />
							</td>
						</tr>
					}
				}
			}
		</tbody>
	</table>
</div>

@code {
	[Parameter]
	public PagedResultView<UserDto>? UserView { get; set; }

	[Parameter]
	public EventCallback DataUpdated { get; set; }

	private async Task DataUpdate()
	{
		await DataUpdated.InvokeAsync(null);

	}
	private void Editar(int id)
	{
		if (UserView is null)
			return;
		navigationManager.NavigateTo($"/user/edit/{id}");
	}
	private void Detalhe(int id)
	{
		if (UserView is null)
			return;
		navigationManager.NavigateTo($"/user/details/{id}");
	}
}