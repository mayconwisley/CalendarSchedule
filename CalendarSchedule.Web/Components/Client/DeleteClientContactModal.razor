@inject IClientContactService clientContactService

<div class="modal fade" id="deleteClientContact-@UserContactId" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm Model="@clientContactDto" OnValidSubmit="@Delete">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MensageError Message="@errorMessage" />
                }
                <InputNumber hidden @bind-Value="clientContactDto!.Id" />
                <DataAnnotationsValidator />

                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Excluir Contato</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <div class="row g-3">
                        <div class="col-12">
                            <p>Tipo: @clientContactDto.Type</p>
                            <p>Número: @clientContactDto.Number</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                    <button type="submit" class="btn btn-danger" data-bs-dismiss="modal">Excluir</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback DataUpdated { get; set; }

    private ClientContactDto clientContactDto = new();

    [Parameter]
    public int UserContactId { get; set; }
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var clientContact = await clientContactService.GetById(UserContactId);
        if (clientContact.IsFailure)
        {
            errorMessage = clientContact.Error.Message;
            return;
        }
        clientContactDto = clientContact.Value;
    }

    private async Task Delete()
    {
        if (clientContactDto is not null)
        {
            await clientContactService.Delete(UserContactId);
            await UpdateData();
        }
    }

    private async Task UpdateData()
    {
       await DataUpdated.InvokeAsync(null);
    }
}
