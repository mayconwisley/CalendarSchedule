@page "/ScheduleCreate"
@inject ScheduleShareService scheduleShareService
@inject IClientService clientService
@inject NavigationManager navigationManager

<h1>Cadastro de Agenda</h1>
<EditForm Model="@ScheduleCreateDto" OnValidSubmit="@Create">
    <DataAnnotationsValidator />
    <div class="col-12">
        <div class="form-check">
            <InputCheckbox class="form-check-input" @onclick=(Particular) @bind-Value="ScheduleCreateDto!.Particular" id="inParticular" />
            <label for="inParticular" class="form-check-label">Particular?</label>
        </div>
    </div>

    <div class="row g-3">
        <div class="col-6">
            <label for="inDataInicio" class="form-label">Data/Hora Inicio</label>
            <InputDate class="form-control" Type="InputDateType.DateTimeLocal" id="inDataInicio" @bind-Value="ScheduleCreateDto!.DateStart" />
            <ValidationMessage For="@(() => ScheduleCreateDto.DateStart)" />
        </div>
        <div class="col-6">
            <label for="inDataFinal" class="form-label">Data/Hora Final</label>
            <InputDate class="form-control" Type="InputDateType.DateTimeLocal" id="inDataFinal" @bind-Value="ScheduleCreateDto.DateFinal" />
            <ValidationMessage For="@(() => ScheduleCreateDto.DateFinal)" />
        </div>
        <div class="col-12">
            <label for="inDescricao" class="form-label">Descrição</label>
            <InputText class="form-control" @bind-Value="ScheduleCreateDto!.Description" id="inDescricao" placeholder="Descrição" />
            <ValidationMessage For="@(() => ScheduleCreateDto.Description)" />
        </div>

        @if (!particular)
        {
            <div class="col-12">
                <label for="inClient" class="form-label">Cliente</label>
                <InputSelect class="form-select" id="inClient" @bind-Value="ScheduleCreateDto!.ClientId">
                    @if (ClientView?.Data is not null)
                    {
                        <option value="0">Selecione uma Opção</option>
                        @foreach (var client in ClientView.Data)
                        {
                            <option value="@client.Id"> @client.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => ScheduleCreateDto.ClientId)" />
            </div>
            <div class="col-6">
                <label class="form-label">Opções</label>
                <div class="form-check">
                    <InputCheckbox class="form-check-input" @bind-Value="ScheduleCreateDto.MeetingType" id="inTypeMeeting" />
                    <label for="inTypeMeeting" class="form-check-label">Remoto?</label>
                </div>
                <div class="form-check">
                    <InputCheckbox class="form-check-input" @bind-Value="ScheduleCreateDto.StatusSchedule" id="inStatusSchedule" />
                    <label for="inStatusSchedule" class="form-check-label">Reservada?</label>
                </div>
            </div>
        }
    </div>
    <div class="my-2">
        <button type="submit" data-bs-dismiss="modal" class="btn btn-primary">
            Próximo
        </button>
        <NavLink href="Schedule" class="mx-1 btn btn-info">
            Voltar
        </NavLink>
    </div>
</EditForm>

@code {
    [Parameter]
    public Action? DataUpdated { get; set; }
    private ScheduleCreateDto? ScheduleCreateDto { get; set; }
    private PagedResultView<ClientDto>? ClientView { get; set; };

    private bool particular = false;

    protected override async Task OnInitializedAsync()
    {
        var client = await clientService.GetAll();
        ClientView = client.Value;
        await base.OnInitializedAsync();
    }

    private void Create()
    {
        if (ScheduleCreateDto is not null)
        {
            try
            {
                scheduleShareService.ScheduleCreateDto = ScheduleCreateDto;
                UpdateData();
                ScheduleCreateDto = new();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);

            }
            navigationManager.NavigateTo($"/ScheduleUserCreate");
        }
    }

    private void UpdateData()
    {
        DataUpdated?.Invoke();
    }

    private void Particular()
    {
        particular = !particular;
        StateHasChanged();
    }
}
