@page "/ClientResponsible"
@layout NewLayout
@inject ITokenStorageService tokenStorageService
@inject IClientResponsibleService clientResponsibleService
@inject NavigationManager navigationManager

<h3>Cadastro Responsável</h3>
<button @onclick="NovoResponsavel" class="btn btn-info">
	Novo Responsável
</button>

@if (clientResponsibleView is null)
{
	<div class="spinner-border" role="status">
		<span class="visually-hidden">Loading...</span>
	</div>
}
else
{
	<TableClientResponsible ClientResponsibleView="@clientResponsibleView" />
	<PaginationTable PageCurrent="@ReceberPagina"
					 TotalData="@clientResponsibleView.TotalData"
					 Page="@clientResponsibleView.Page"
					 TotalPage="@clientResponsibleView.TotalPage" />
}

@code {
	private PagedResultView<ClientResponsibleDto>? clientResponsibleView;
	private LoginDto? LoginDto { get; set; } = new();
	protected override async Task OnInitializedAsync()
	{
		var token = await tokenStorageService.GetToken(LoginDto!);
		if (token.IsFailure)
		{
			await tokenStorageService.RemoverToken();
			navigationManager.NavigateTo("/Login");
		}

		if (token.IsSuccess)
		{
			await DataUpdated();
		}
	}

	private async Task DataUpdated()
	{
		var clientResponsible = await clientResponsibleService.GetAll();
		clientResponsibleView = clientResponsible.Value;
		StateHasChanged();
	}
	private async Task ReceberPagina(int pageCurrent)
	{
		var clientResponsible = await clientResponsibleService.GetAll(pageCurrent);
		clientResponsibleView = clientResponsible.Value;

	}
	private void NovoResponsavel()
	{
		navigationManager.NavigateTo("/ClientResponsibleCreate");
	}
}