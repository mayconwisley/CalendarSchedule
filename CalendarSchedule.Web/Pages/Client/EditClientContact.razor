@page "/client/contact/edit/{ClientContactId:int}"

@inject IClientContactService clientContactService
@inject NavigationManager navigationManager

@if (clientContactDto is not null)
{
	<div>
		<h1>Editar Contato Cliente</h1>
		<EditForm Model="@clientContactDto" OnValidSubmit="@Edit">
			@if (!string.IsNullOrEmpty(errorMessage))
			{
				<MensageError Message="@errorMessage" />
			}
			<DataAnnotationsValidator />
			<div class="row g-3">
				<div class="col-12">
					<label class="form-label">Cliente: </label>
					<span>@ClientContactId - @clientDto!.Name</span>
				</div>
				<div class="col-12">
					<label class="form-label">Responsável: </label>
					<span>@clientResponsibleDto.Id - @clientResponsibleDto.Name</span>
				</div>
				<div class="col-6">
					<label for="inType" class="form-label">Tipo</label>
					<InputText class="form-control" id="inType" @bind-Value="clientContactDto!.Type" placeholder="Tipo" />
					<ValidationMessage For="@(() => clientContactDto.Type)" />
				</div>
				<div class="col-6">
					<label for="inNumber" class="form-label">Número</label>
					<InputText class="form-control" id="inNumber" @bind-Value="clientContactDto!.Number" placeholder="Número" />
					<ValidationMessage For="@(() => clientContactDto.Number)" />
				</div>

			</div>
			<div class="mt-4 d-flex gap-2">
				<button type="submit" class="btn btn-primary" disabled="@isSubmitting">
					@((isSubmitting) ? "Salvando..." : "Salvar")
				</button>
				<button type="button" @onclick="() => Voltar(clientDto.Id)" class="btn btn-info">Voltar</button>
			</div>
		</EditForm>
	</div>
}
@code {

	[Parameter]
	public int ClientContactId { get; set; }
		
	private ClientContactDto clientContactDto  = new();
	private ClientResponsibleDto clientResponsibleDto = new();
	private ClientDto clientDto  = new();
	private string? errorMessage;
	private bool isSubmitting = false;

	protected override async Task OnInitializedAsync()
	{
		var clientContact = await clientContactService.GetById(ClientContactId);
		if (clientContact.IsFailure)
		{
			errorMessage = clientContact.Error.Message;
			return;
		}
		clientContactDto = clientContact.Value;
		clientResponsibleDto = clientContactDto.ClientResponsibleDto!;
		clientDto = clientContactDto.ClientDto!;
	}

	private async Task Edit()
	{
		isSubmitting = true;
		errorMessage = null;

		try
		{
			var clientContactUpdateDto = new ClientContactUpdateDto()
			{
				Id = clientContactDto!.Id,
				Number = clientContactDto.Number,
				Type = clientContactDto.Type,
				ClientId = clientContactDto.ClientDto!.Id,
				ClientResponsibleId = clientContactDto.ClientResponsibleDto!.Id,
				
			};

			var clientContact = await clientContactService.Update(clientContactUpdateDto);
			if (clientContact.IsFailure)
			{
				errorMessage = clientContact.Error.Message;
				return;
			}
			navigationManager.NavigateTo($"/client/details/contact/{clientDto.Id}");
		}
		catch (Exception ex)
		{
			errorMessage = $"Erro inesperado ao salvar contato cliente: {ex.Message}";
		}
		finally
		{
			isSubmitting = false;
		}
	}
	private void Voltar(int id)
	{
		navigationManager.NavigateTo($"/client/details/contact/{id}");
	}
}
