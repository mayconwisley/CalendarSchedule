@page "/client"
@layout NewLayout
@inject ITokenStorageService tokenStorageService
@inject IClientService clientService
@inject NavigationManager navigationManager

<h3>Cadastro de Cliente</h3>
<button @onclick="NovoCliente" class="btn btn-info">
	Novo Cliente
</button>

@if (clientView is null)
{
	<div class="spinner-border" role="status">
		<span class="visually-hidden">Loading...</span>
	</div>
}
else
{
	@if (!string.IsNullOrEmpty(errorMessage))
	{
		<MensageError Message="@errorMessage" />
	}
	else
	{
		<TableClient ClientView="@clientView" DataUpdated="@DataUpdated" />
		<PaginationTable PageCurrent="@ReceberPagina"
						 TotalData="@clientView.TotalData"
						 Page="@clientView.Page"
						 TotalPage="@clientView.TotalPage" />
	}
}

@code {
	private PagedResultView<ClientDto>? clientView;
	private LoginDto? LoginDto { get; set; } = new();
	private string? errorMessage;

	protected override async Task OnInitializedAsync()
	{
		var token = await tokenStorageService.GetToken(LoginDto!);
		if (token.IsFailure)
		{
			await tokenStorageService.RemoverToken();
			navigationManager.NavigateTo("/Login");
		}

		if (token.IsSuccess)
		{
			await DataUpdated();
		}
	}

	private async Task DataUpdated()
	{
		var client = await clientService.GetAll();
		if (client.IsFailure)
		{
			errorMessage = client.Error.Message;
			return;
		}
		clientView = client.Value;

		StateHasChanged();
	}

	private async Task ReceberPagina(int pageCurrent)
	{
		var client = await clientService.GetAll(pageCurrent);
		if (client.IsFailure)
		{
			await tokenStorageService.RemoverToken();
			return;
		}
		clientView = client.Value;
	}
	private void NovoCliente()
	{
		navigationManager.NavigateTo("/client/create");
	}
}