@page "/Login"
@inject ITokenStorageService tokenStorageService
@inject IUserStorageService userStorageService
@inject NavigationManager navigationManager
<div class="formulario-login">
    <EditForm Model="@LoginDto" OnValidSubmit="Log_in" >
        <h2>Login</h2>
        <DataAnnotationsValidator />
        
            <InputText @bind-Value="LoginDto!.Username" type="text" placeholder="Usuário" />
        
        
            <InputText @bind-Value="LoginDto!.Password" type="password" placeholder="Senha" />
        
        
            <button type="submit">Entrar</button>

    </EditForm>
</div>

@code {
    private LoginDto? LoginDto { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await tokenStorageService.GetToken(LoginDto!);
            if (token.Bearer is null)
            {
                await tokenStorageService.RemoverToken();
            }

            if (token.Bearer is not null)
            {
                navigationManager.NavigateTo("/Schedule", true);
            }
            await base.OnInitializedAsync();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task Log_in()
    {
        if (LoginDto is not null)
        {
            var token = await tokenStorageService.GetToken(LoginDto);
            var user = await userStorageService.GetUserSession(LoginDto);
            if (token.Bearer is not null)
            {
                navigationManager.NavigateTo("/Schedule", true);
            }
        }
    }
}
