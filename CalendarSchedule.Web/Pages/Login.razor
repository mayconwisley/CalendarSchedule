@page "/Login"
@inject ITokenStorageService tokenStorageService
@inject IUserStorageService userStorageService
@inject NavigationManager navigationManager



<EditForm EditContext="@editContext" OnValidSubmit="Log_in" class="formulario-login">
	@if (!string.IsNullOrEmpty(errorMessage))
	{
		<MensageError Message="@errorMessage" />
	}
	<h2>Login</h2>
	<DataAnnotationsValidator />
	<div>
		<InputText @bind-Value="LoginDto!.Username" type="text" placeholder="Usuário" />
		<ValidationMessage For="@(() => LoginDto.Username)" />
	</div>
	<div>
		<InputText @bind-Value="LoginDto!.Password" type="password" placeholder="Senha" />
		<ValidationMessage For="@(() => LoginDto.Password)" />
	</div>
	<div>
		<button class="btnLogin">Entrar</button>
	</div>
</EditForm>

@code {
	private LoginDto LoginDto { get; set; } = new();
	private EditContext? editContext;
	private string? errorMessage;

	protected override void OnInitialized()
	{
		editContext = new EditContext(LoginDto);
	}

	private async Task Log_in()
	{

		var token = await tokenStorageService.GetToken(LoginDto);

		if (token.IsFailure)
		{
			errorMessage = token.Error.Message;
			return;
		}

		var user = await userStorageService.GetUserSession(LoginDto);
		navigationManager.NavigateTo("/Schedule", true);
	}
}
