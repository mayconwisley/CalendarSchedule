@page "/UserEdit/{UserId}"

@inject IUserService userService
@inject NavigationManager navigationManager


<h1>Editar Colaborador</h1>
<EditForm Model="@UserDto" OnValidSubmit="@Edit">
	<InputNumber hidden @bind-Value="UserDto.Id" />
	<DataAnnotationsValidator />

	<div class="row g-3">
		<div class="col-12">
			<label for="inNome" class="form-label">Nome</label>
			<InputText class="form-control" id="inNome" @bind-Value="UserDto!.Name" placeholder="Name" />
			<ValidationMessage For="@(() => UserDto.Name)" />
		</div>
		<div class="col-6">
			<label for="inUsername" class="form-label">Usuário</label>
			<InputText class="form-control" id="inUsername" @bind-Value="UserDto!.Username" placeholder="Usuário" />
			<ValidationMessage For="@(() => UserDto.Username)" />

		</div>
		<div class="col-6">
			<label for="inPassword" class="form-label">Senha</label>
			<InputText type="password" class="form-control" id="inPassword" @bind-Value="UserDto!.Password" placeholder="Senha" />
			<ValidationMessage For="@(() => UserDto.Password)" />
		</div>
		<div class="col-12">
			<label for="inDescription" class="form-label">Descrição</label>
			<InputText class="form-control" id="inDescription" @bind-Value="UserDto!.Description" placeholder="Descrição" />
		</div>
		<div class="col-6">
			<div class="form-check">
				<InputCheckbox class="form-check-input" id="inManager" @bind-Value="UserDto.Manager" />
				<label for="inManager" class="form-label">Gestor</label>
			</div>
		</div>
		<div class="col-6">
			<div class="form-check">
				<InputCheckbox class="form-check-input" id="inActive" @bind-Value="UserDto.Active" />
				<label for="inActive" class="form-label">Ativo</label>
			</div>
		</div>
	</div>


	<button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Salvar</button>
	<NavLink href="User" class="btn btn-info">
		Voltar
	</NavLink>

</EditForm>


@code {
	[Parameter]
	public EventCallback DataUpdated { get; set; }

	[Parameter]
	public string UserId { get; set; } = string.Empty;

	private UserDto? UserDto { get; set; }
	
	protected override async Task OnInitializedAsync()
	{
		var user = await userService.GetById(int.Parse(UserId));
		UserDto = user.Value;
	}

	private async Task Edit()
	{
		if (UserDto is not null)
		{
			var	userUpdateDto = new UserUpdateDto
			{
				Id = UserDto.Id,
				Name = UserDto.Name,
				Username = UserDto.Username,
				Password = UserDto.Password,
				Description = UserDto.Description,
				Manager = UserDto.Manager,
				Active = UserDto.Active
			};

			var room = await userService.Update(userUpdateDto);
			await UpdateData();
			navigationManager.NavigateTo("/User");
		}
	}

	private async Task UpdateData()
	{
		await DataUpdated.InvokeAsync(null);
	}
}
