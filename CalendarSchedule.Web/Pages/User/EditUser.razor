@page "/user/edit/{UserId:int}"

@inject IUserService userService
@inject NavigationManager navigationManager

@if (UserDto is null)
{
	<MensageError Message="@errorMessage" />
}
else
{
	<h1>Editar Colaborador</h1>
	<EditForm Model="@UserDto" OnValidSubmit="@Edit">
		@if (!string.IsNullOrEmpty(errorMessage))
		{
			<MensageError Message="@errorMessage" />
		}
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="row g-3">
			<div class="col-12">
				<label for="inNome" class="form-label">Nome</label>
				<InputText class="form-control" id="inNome" @bind-Value="UserDto!.Name" placeholder="Name" />
				<ValidationMessage For="@(() => UserDto.Name)" />
			</div>
			<div class="col-6">
				<label for="inUsername" class="form-label">Usuário</label>
				<InputText class="form-control" id="inUsername" @bind-Value="UserDto!.Username" placeholder="Usuário" />
				<ValidationMessage For="@(() => UserDto.Username)" />

			</div>
			<div class="col-6">
				<label for="inPassword" class="form-label">Senha</label>
				<InputText type="password" class="form-control" id="inPassword" @bind-Value="UserDto!.Password" placeholder="Senha" />
				<ValidationMessage For="@(() => UserDto.Password)" />
			</div>
			<div class="col-12">
				<label for="inDescription" class="form-label">Descrição</label>
				<InputText class="form-control" id="inDescription" @bind-Value="UserDto!.Description" placeholder="Descrição" />
			</div>
			<div class="col-6">
				<div class="form-check">
					<InputCheckbox class="form-check-input" id="inManager" @bind-Value="ManagerValue" />
					<label for="inManager" class="form-label">Gestor</label>
				</div>
			</div>
			<div class="col-6">
				<div class="form-check">
					<InputCheckbox class="form-check-input" id="inActive" @bind-Value="ActiveValue" />
					<label for="inActive" class="form-label">Ativo</label>
				</div>
			</div>
		</div>
		<div class="mt-4 d-flex gap-2">
			<button type="submit" class="btn btn-primary" disabled="@isSubmitting">
				@((isSubmitting) ? "Salvando..." : "Salvar")
			</button>
			<button type="button" @onclick="Voltar" class="btn btn-info">Voltar</button>
		</div>
	</EditForm>
}
@code {

	[Parameter]
	public int UserId { get; set; }
	private string? errorMessage;
	private UserDto UserDto = new();
	private bool isSubmitting = false;

	private bool ManagerValue
	{
		get => UserDto?.Manager ?? false;
		set
		{
			if (UserDto != null)
				UserDto.Manager = value;
		}
	}
	private bool ActiveValue
	{
		get => UserDto?.Active ?? false;
		set
		{
			if (UserDto != null)
				UserDto.Active = value;
		}
	}

	protected override async Task OnInitializedAsync()
	{
		var user = await userService.GetById(UserId);
		if (user.IsSuccess)
			UserDto = user.Value;
		else
			errorMessage = $"Não foi possível carregar o usuário: {user.Error.Message}";

	}
	private void Voltar()
	{
		navigationManager.NavigateTo("/user");
	}

	private async Task Edit()
	{
		isSubmitting = true;
		errorMessage = null;

		try
		{
			if (UserDto is null)
				return;

			var userUpdateDto = new UserUpdateDto
			{
				Id = UserId,
				Name = UserDto.Name!,
				Username = UserDto.Username,
				Manager = UserDto.Manager,
				Active = UserDto.Active,
				Password = string.IsNullOrWhiteSpace(UserDto.Password) ? null : UserDto.Password,
				Description = string.IsNullOrWhiteSpace(UserDto.Description) ? null : UserDto.Description
			};

			var user = await userService.Update(userUpdateDto);

			if (user.IsFailure)
			{
				errorMessage = user.Error.Message;
				return;
			}

			navigationManager.NavigateTo("/user");
		}
		catch (Exception ex)
		{
			errorMessage = $"Erro inesperado ao salvar usuário: {ex.Message}";
		}
		finally
		{
			isSubmitting = false;
		}
	}
}
