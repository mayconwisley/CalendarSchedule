@page "/user/edit/{UserId:int}"

@inject IUserService userService
@inject NavigationManager navigationManager

@if (UserDto is null)
{

}
else
{
	<h1>Editar Colaborador</h1>
	<EditForm Model="@UserDto" OnValidSubmit="@Edit">
		<DataAnnotationsValidator />

		<div class="row g-3">
			<div class="col-12">
				<label for="inNome" class="form-label">Nome</label>
				<InputText class="form-control" id="inNome" @bind-Value="UserDto!.Name" placeholder="Name" />
				<ValidationMessage For="@(() => UserDto.Name)" />
			</div>
			<div class="col-6">
				<label for="inUsername" class="form-label">Usuário</label>
				<InputText class="form-control" id="inUsername" @bind-Value="UserDto!.Username" placeholder="Usuário" />
				<ValidationMessage For="@(() => UserDto.Username)" />

			</div>
			<div class="col-6">
				<label for="inPassword" class="form-label">Senha</label>
				<InputText type="password" class="form-control" id="inPassword" @bind-Value="UserDto!.Password" placeholder="Senha" />
				<ValidationMessage For="@(() => UserDto.Password)" />
			</div>
			<div class="col-12">
				<label for="inDescription" class="form-label">Descrição</label>
				<InputText class="form-control" id="inDescription" @bind-Value="UserDto!.Description" placeholder="Descrição" />
			</div>
			<div class="col-6">
				<div class="form-check">
					<InputCheckbox class="form-check-input" id="inManager" @bind-Value="ManagerValue" />
					<label for="inManager" class="form-label">Gestor</label>
				</div>
			</div>
			<div class="col-6">
				<div class="form-check">
					<InputCheckbox class="form-check-input" id="inActive" @bind-Value="ActiveValue" />
					<label for="inActive" class="form-label">Ativo</label>
				</div>
			</div>
		</div>


		<button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Salvar</button>
		<NavLink href="User" class="btn btn-info">
			Voltar
		</NavLink>

	</EditForm>
}
@code {
	[Parameter]
	public EventCallback DataUpdated { get; set; }

	[Parameter]
	public int UserId { get; set; }

	private UserDto? UserDto;

	private bool ManagerValue
	{
		get => UserDto?.Manager ?? false;
		set
		{
			if (UserDto != null)
				UserDto.Manager = value;
		}
	}
	private bool ActiveValue
	{
		get => UserDto?.Active ?? false;
		set
		{
			if (UserDto != null)
				UserDto.Active = value;
		}
	}

	protected override async Task OnInitializedAsync()
	{
		var user = await userService.GetById(UserId);
		if (user.IsSuccess)
			UserDto = user.Value;
		else
			navigationManager.NavigateTo("/user");

	}

	private async Task Edit()
	{
		var userUpdateDto = new UserUpdateDto
			{
				Id = UserDto!.Id,
				Name = UserDto.Name!,
				Username = UserDto.Username,
				Password = UserDto.Password,
				Description = UserDto.Description,
				Manager = UserDto.Manager,
				Active = UserDto.Active
			};

		var room = await userService.Update(userUpdateDto);
		await UpdateData();
		navigationManager.NavigateTo("/user");
	}

	private async Task UpdateData()
	{
		await DataUpdated.InvokeAsync(null);
	}
}
